<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2018 Dematic, Corp.
  ~ Licensed under the MIT Open Source License: https://opensource.org/licenses/MIT
  -->

<project>
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.dematic.labs.truck_alert</groupId>
        <artifactId>server</artifactId>
        <version>0.4.3-SNAPSHOT</version>
    </parent>

    <groupId>com.dematic.labs.truck_alert.server</groupId>
    <artifactId>alert_generator</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.dematic.labs.truck_alert.server</groupId>
            <artifactId>api</artifactId>
            <version>0.4.3-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.dematic.labs.toolkit.helpers</groupId>
            <artifactId>test_util</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <mainClass>com.dematic.labs.truck_alert.server.alert_generator.Main</mainClass>
                            <addClasspath>true</addClasspath>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>get-local-ip</id>
                        <goals>
                            <goal>local-ip</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <images>
                        <image>
                            <name>us.gcr.io/dlabs-dev-primary/%a:%v</name>
                            <alias>alert_generator</alias>
                            <build>
                                <assembly>
                                    <inline>
                                        <dependencySets>
                                            <dependencySet>
                                                <useProjectArtifact>true</useProjectArtifact>
                                                <includes>
                                                    <include>${project.groupId}:${project.artifactId}</include>
                                                </includes>
                                                <outputFileNameMapping>server.jar</outputFileNameMapping>
                                                <useStrictFiltering>true</useStrictFiltering>
                                            </dependencySet>
                                            <dependencySet>
                                                <useProjectArtifact>false</useProjectArtifact>
                                                <scope>runtime</scope>
                                                <fileMode>0644</fileMode>
                                            </dependencySet>
                                        </dependencySets>
                                    </inline>
                                </assembly>
                                <tags>latest</tags>
                            </build>
                            <run>
                                <dependsOn>
                                    <container>kafka</container>
                                </dependsOn>
                                <links>
                                    <link>kafka</link>
                                </links>
                                <ports>
                                    <port>docker.jacoco.port:6300</port>
                                </ports>
                                <volumes>
                                    <bind>
                                        <volume>src/test/docker/conf:/opt/dlabs/conf:ro</volume>
                                    </bind>
                                </volumes>
                            </run>
                        </image>
                        <image>
                            <name>us.gcr.io/dlabs-dev-primary/alert_collector:%v</name>
                            <alias>server</alias>
                            <build>
                                <skip>true</skip>
                            </build>
                            <run>
                                <dependsOn>
                                    <container>kafka</container>
                                </dependsOn>
                                <links>
                                    <link>kafka</link>
                                </links>
                                <ports>
                                    <port>server.port:8080</port>
                                </ports>
                                <volumes>
                                    <bind>
                                        <volume>src/test/docker/conf:/opt/dlabs/conf:ro</volume>
                                    </bind>
                                </volumes>
                                <wait>
                                    <healthy>true</healthy>
                                    <time>160000</time>
                                </wait>
                            </run>
                        </image>
                        <image>
                            <name>wurstmeister/zookeeper:3.4.6</name>
                            <alias>zookeeper</alias>
                            <build>
                                <skip>true</skip>
                            </build>
                            <run>
                                <ports>
                                    <port>zookeeper.port:2181</port>
                                </ports>
                                <wait>
                                    <log>binding to port</log>
                                    <time>60000</time>
                                </wait>
                            </run>
                        </image>
                        <image>
                            <name>wurstmeister/kafka:2.11-1.1.0</name>
                            <alias>kafka</alias>
                            <build>
                                <skip>true</skip>
                            </build>
                            <run>
                                <env>
                                    <KAFKA_ADVERTISED_HOST_NAME>${local.ip}</KAFKA_ADVERTISED_HOST_NAME>
                                    <KAFKA_ZOOKEEPER_CONNECT>zookeeper:2181</KAFKA_ZOOKEEPER_CONNECT>
                                    <LOG4J_LOGGER_KAFKA>WARN</LOG4J_LOGGER_KAFKA>
                                    <KAFKA_CREATE_TOPICS>my-topic:1:1</KAFKA_CREATE_TOPICS>
                                </env>
                                <dependsOn>
                                    <container>zookeeper</container>
                                </dependsOn>
                                <links>
                                    <link>zookeeper</link>
                                </links>
                                <ports>
                                    <port>kafka.port:9092</port>
                                </ports>
                                <volumes>
                                    <bind>
                                        <!-- used to let kafka know its own port so as to publish it to zookeeper -->
                                        <volume>/var/run/docker.sock:/var/run/docker.sock</volume>
                                    </bind>
                                </volumes>
                                <wait>
                                    <log>Created topic "my-topic".</log>
                                    <time>60000</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>build-image</id>
                        <goals>
                            <goal>build</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                    <execution>
                        <id>start-execution</id>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                    </execution>
                    <execution>
                        <id>stop-execution</id>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
